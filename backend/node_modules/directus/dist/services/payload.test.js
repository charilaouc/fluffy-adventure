"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const knex_1 = __importDefault(require("knex"));
const knex_mock_client_1 = require("knex-mock-client");
const services_1 = require("../../src/services");
const helpers_1 = require("../../src/database/helpers");
jest.mock('../../src/database/index', () => {
    return { getDatabaseClient: jest.fn().mockReturnValue('postgres') };
});
jest.requireMock('../../src/database/index');
describe('Integration Tests', () => {
    let db;
    let tracker;
    beforeAll(async () => {
        db = (0, knex_1.default)({ client: knex_mock_client_1.MockClient });
        tracker = (0, knex_mock_client_1.getTracker)();
    });
    afterEach(() => {
        tracker.reset();
    });
    describe('Services / PayloadService', () => {
        describe('transformers', () => {
            let service;
            let helpers;
            beforeEach(() => {
                service = new services_1.PayloadService('test', {
                    knex: db,
                    schema: { collections: {}, relations: [] },
                });
                helpers = (0, helpers_1.getHelpers)(db);
            });
            describe('csv', () => {
                it('Returns undefined for illegal values', async () => {
                    const result = await service.transformers['cast-csv']({
                        value: 123,
                        action: 'read',
                        payload: {},
                        accountability: { role: null },
                        specials: [],
                        helpers,
                    });
                    expect(result).toBe(undefined);
                });
                it('Returns [] for empty strings', async () => {
                    const result = await service.transformers['cast-csv']({
                        value: '',
                        action: 'read',
                        payload: {},
                        accountability: { role: null },
                        specials: [],
                        helpers,
                    });
                    expect(result).toMatchObject([]);
                });
                it('Splits the CSV string', async () => {
                    const result = await service.transformers['cast-csv']({
                        value: 'test,directus',
                        action: 'read',
                        payload: {},
                        accountability: { role: null },
                        specials: [],
                        helpers,
                    });
                    expect(result).toMatchObject(['test', 'directus']);
                });
                it('Saves array values as joined string', async () => {
                    const result = await service.transformers['cast-csv']({
                        value: ['test', 'directus'],
                        action: 'create',
                        payload: {},
                        accountability: { role: null },
                        specials: [],
                        helpers,
                    });
                    expect(result).toBe('test,directus');
                });
                it('Saves string values as is', async () => {
                    const result = await service.transformers['cast-csv']({
                        value: 'test,directus',
                        action: 'create',
                        payload: {},
                        accountability: { role: null },
                        specials: [],
                        helpers,
                    });
                    expect(result).toBe('test,directus');
                });
            });
        });
    });
});
